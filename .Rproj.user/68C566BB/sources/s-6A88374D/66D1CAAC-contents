---
title: "Stats 744: hw3"
author: "Daniella Lato"
date: "27/09/2019"
output: html_document
---

```{r setup, include=FALSE}
library("RColorBrewer")
library("gplots")
library("ggplot2")
library("methods")
library(methods)
## BMB: I often set digits much smaller for documents ...
options("scipen"=100, "digits"=10)
library(lattice)
```

## Goal:
Turn a table that is hard to read into graphs that convey the information .

## Data:

The table that I have chosen to work with is new data from my thesis.
I have selection coefficient information for all genes in three different bacterial species: *Escherichia coli*, *Bacillus subtilis*, and *Sinorhizobium meliloti*.
*S. meliloti* is a multi-repliconic bacteria (has more than one chromosome), and therefore each of the replicons is treated as a separate data set in this analysis.
Each bacteria has selection information on about 2600 genes, which is far too much for any human to read and understand.
I will be creating graphics to better visualize this data.

A PDF version of this data can be found [here](https://github.com/dlato/Stat744/blob/master/Supplementary_table_per_gene_dN_dS_omega.pdf).

*BMB: definitely nice to work with your own data, as you have access to the original format ...*

Read in and prepare data:
```{r read dat}
#read in data
all_data <- read.csv("selection_coeff_all.csv")
#remove missing data to avoid warnings (NA's)
all_data <- all_data[-which(is.na(all_data$value) == TRUE),]
## BMB:
## tidyr::drop_na(all_data,value)
## or
## all_data <- all_data[!is.na(all_data$value),]
## the version you have is DANGEROUS if there are no NA values - try it!
#number of bacterial replicons
num_of_plots <- length(levels(all_data$bac))
#make sure bacteria names are italicized
#if there is a nicer way to do this so it works with facet I would love to know!
levels(all_data$bac) <- c("ecoli" = expression(paste(italic("E.coli"), " Chromosome")),
                          "bass" = expression(paste(italic("B. subtilis"), " Chromosome")),
                          "sinoC" = expression(paste(italic("S.meliloti"), " Chromosome")),
                          "pSymA" = expression(paste(italic("S.meliloti"), " pSymA")),
                          "pSymB" = expression(paste(italic("S.meliloti"), " pSymB")))

## BMB this might help:
## https://stackoverflow.com/questions/3472980/how-to-change-facet-labels
## see second answer. also  see ?label_parsed

#reordering levels by median omega
#there is probably a better way to do this but I could not figure it out
#I wanted something like this:
#all_data$bac <- with(all_data, reorder(bac, value, FUN = median))
## omega_dat <- all_data[which(all_data$class == "omega"),]
## omega_dat$bac <- with(omega_dat, reorder(bac, value, FUN = median))
## bac_order <- rev(levels(omega_dat$bac))
## all_data$bac <- factor(all_data$bac, levels = bac_order)
## BMB: I don't if this is any better than your solution
library(tidyverse)
all_data <- (all_data
  %>% group_by(bac)
  %>% mutate(omegaval=median(value[class=="omega"]))
  %>% ungroup()
  %>% mutate(bac = reorder(bac,omegaval))
  %>% select(-omegaval)
)
```

### Graph 1:
```{r g1}
#choose colours
colours_arr <- rep(c("#CFE7C8","#D2E4DC","#A0747A"),num_of_plots)
#plot
vio_bar<-(ggplot(all_data, aes(x=class, y=value, fill=class)) 
  + geom_violin() 
  + geom_boxplot(width=.1, outlier.shape=NA, fill = colours_arr) 
  + stat_boxplot(geom = "errorbar", width = 0.2) 
  + facet_wrap(~bac, labeller=label_parsed)
  + xlab("") 
  + ylab("Value") 
  #setting up a theme that proabably can be condensed into less code
  + theme(strip.background =element_rect(fill="#e7e5e2"))
  + theme(strip.text = element_text(size =10)) 
  + theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        panel.background = element_rect(fill = "white", colour = NA),
        panel.grid.major = element_line(colour = "grey90", size = 0.2),
        panel.grid.minor = element_line(colour = "grey98", size = 0.5),
        panel.spacing = unit(0.25, "lines"),
        axis.text=element_text(size=10)) 
#  + scale_color_manual(values=colours_arr)
#make the omega a math symbol in both the legend and x-axis
  + scale_x_discrete(breaks = c("dN", "dS", "omega"),labels = c("dN","dS", expression(omega))) 
#log scale
  + scale_y_continuous(trans='log10')
  + scale_fill_manual(values=c("#CFE7C8","#D2E4DC","#A0747A"), labels = c(" dN", " dS", expression(omega))) 
)

vio_bar
## BMB: can you save the theme?
```

The graph above shows violin plots of the data with box plots on top.
This might be redundant information but I think it allows the distribution of data to be shown as well as some summary information that the box plot provides (quartiles, median..etc). **BMB: that seems fine**
I chose to use facet is that it is easy to compare the distribution of dN, dS, and $\omega$ values between each of the bacterial replicons.
Often in selection analysis, the $\omega$ value is most important because it can give information about what kind of selection is acting upon a gene.
I therefore chose lighter and similar colours for the dN and dS values and a bolder colour for the $\omega$ value so it stands out and is the focal point of the graph.

**BMB**: might also be worth a redundant legend, that you relocate to the empty facet space? (then it won't cost you any extra space)

It is also common for dS to be larger than dN.
This is where the box plots are particularly helpful, because it is easy to see that dS is larger than dN in all of the bacteria. 

Since some of the selection values are very small (almost or close to zero) I decided to transform the y-axis to be on a log scale to allow for the distribution to be easier to see.

I also decided to re-order the bacteria in the plot so that they went from highest median $\omega$ value to lowest.
This way the data is in some sort of meaningful order and it is easy to compare which bacteria had the highest $\omega$ value.

**BMB**: I wonder whether labels 0.0001, ... 1.0000 are more clear, or whether exponential notation (10^(-4) etc.) would be better. depends on your audience I guess.  Also maybe format as 0.0001, 0.001, 0.01, 0.1, 1.0 ?

### Graph 2:
```{r g2}
#plot
strp_p <-(ggplot(all_data, aes(x=class, y=value, colour = class)) 
  #is geom_jitter the correct thing to use for a strip plot? ## BMB seems fine
  + geom_jitter(position=position_jitter(0.2)) 
  + facet_wrap(~bac, labeller=label_parsed)
  + xlab("") 
  + ylab("Value") 
  #setting up a theme that proabably can be condensed into less code
  + theme(strip.background =element_rect(fill="#e7e5e2"))
  + theme(strip.text = element_text(size =10)) 
  + theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5),
        panel.background = element_rect(fill = "white", colour = NA),
        panel.grid.major = element_line(colour = "grey90", size = 0.2),
        panel.grid.minor = element_line(colour = "grey98", size = 0.5),
        panel.spacing = unit(0.25, "lines"),
        axis.text=element_text(size=10)) 
  + scale_color_manual(values=colours_arr)
#make the omega a math symbol in both the legend and x-axis
+ scale_x_discrete(breaks = c("dN", "dS", "omega"),labels = c("dN","dS", expression(omega)))
#adding median values
 + stat_summary(fun.y=median, geom="point", shape=18, size=2, color="#023C40")
) 

strp_p 
```

**BMB:** don't repeat theme code!

This graph shows the same data but as a strip plot. 
I like this version of the graph best because I think it is easier to show the distribution of the points and conveys biological properties clearly.
Some of these were mentioned above, that dS is usually > dN, and than $\omega$ is often the "most important" value to consider.
Another biologically relevant feature is that typically $\omega$ should be less than 1 for most genes.
That is, most genes should not be under positive selection.
In this graph it is easy to see that there are very few genes that are under positive selection, and majority of the genes have very small dN, dS and $\omega$ values, meaning that there are very few substitutions in the DNA.
The median dots (dark blue) also help illustrate the above mentioned trends: dS > dN, and $\omega$ < 1 for majority of the genes.

**BMB**: maybe use horizontal bars for the medians?

I also made this graph using a log scale (below) but I think the point that $\omega$ < 1 for most of the values is better illustrated without the log scale.
Without the log scale the points are anchored at zero (which makes sense because you could have zero changes in the DNA and therefore $\omega$ = 0), and it is easy to see that the points are mostly below 0.5.
On the log scale, this is harder to see. But this may just be preference.

One advantage of the strip plot in this case is that because it shows the actual points, you can tell where the violin plot may have been misleading.
For example, in the Chromosome of *S.meliloti* there are no points between 0.001 and 0.0001, this is clear in the strip plot.
However, in the violin plot, because the smooth line of the plot extends from 0.001 to 0.0001, it apears as though there are points within that region.

```{r log scale}
(strp_p 
  + scale_y_continuous(trans='log10')
)
```

**BMB**: what about overlaying a violin outline on the strip plots?

Obviously any of these graphs are preferable to reading a table with 2000+ lines.

**BMB**: definitely!  This wasn't quite what we had in mind - we meant to take some data that **would have been presented as a table** (or were actually presented as such) and transform them to a plot. Nevertheless, you've put a lot of thought into this and the graphs look nice.

score: 2.5
