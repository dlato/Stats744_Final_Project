+ xlab("")
+ ylab("Expected Number of Substitutions per Site")
#+ scale_color_manual(values=c("#8E8DBE","#89C794","#A0747A"),labels = c(" dN", " dS", expression(omega)))
#+ scale_color_manual(values=c("#8BC1C1","#928CAB","#BE6361"),labels = c(" dN", " dS", expression(omega)))
+ scale_color_manual(values=c("#8BC1C1","#928CAB","#C29979"),labels = c(" dN", " dS", expression(omega)))
#make the omega a math symbol in x-axis
+ scale_x_discrete(breaks = c("dN", "dS", "omega"),labels = c("dN","dS", expression(omega)))
#log scale and removing trailing zeros from y-axis labels
#and have label at omega = 1 for reference
+ scale_y_continuous(trans='log10',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10,1000),
#adding a second axis for omega!
sec.axis = sec_axis(trans = ~ . * 1,
name = 'Ratio of dN/dS \n',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10,1000)))
#remove weird second legend
+ guides(fill=FALSE)
)
vio_str_box
colours_arr <- c("#C29979")
omeg_g <- (ggplot(ecol_omeg, aes(x=new_sections, y=value.mean, colour=class))
#  geom_errorbar(aes(ymin=value.mean-sd, ymax=value.mean+sd), width=.1, position=pd) +
+ geom_point(alpha = 0.75)
+ geom_smooth(method = lm)
#labels for the colours
+ annotate("text", x=5.4,y=0.4,label="omega", parse=TRUE, colour = "#C29979", size = 10)
+ scale_y_continuous(trans='log10',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10))
+ scale_color_manual(values=colours_arr)
#omega = 1 reference line
+  geom_hline(yintercept=1, linetype="dashed", color = "black", size=1)
#axis labels
+ xlab("Distance from the Origin of Replication (Mbp)")
+ ylab("Mean Expected Number of Substitutions per 10Kbp")
+ ylab("Mean Ratio of dN/dS per 10Kbp")
+ ggtitle(expression(paste(italic("Streptomyces"), " Chromosome")))
+ theme(legend.position = "none")
)
omeg_g
colours_arr <- c("#B18C6E")
omeg_g <- (ggplot(ecol_omeg, aes(x=new_sections, y=value.mean, colour=class))
#  geom_errorbar(aes(ymin=value.mean-sd, ymax=value.mean+sd), width=.1, position=pd) +
+ geom_point(alpha = 0.75)
+ geom_smooth(method = lm)
#labels for the colours
+ annotate("text", x=5.4,y=0.4,label="omega", parse=TRUE, colour = "#C29979", size = 10)
+ scale_y_continuous(trans='log10',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10))
+ scale_color_manual(values=colours_arr)
#omega = 1 reference line
+  geom_hline(yintercept=1, linetype="dashed", color = "black", size=1)
#axis labels
+ xlab("Distance from the Origin of Replication (Mbp)")
+ ylab("Mean Expected Number of Substitutions per 10Kbp")
+ ylab("Mean Ratio of dN/dS per 10Kbp")
+ ggtitle(expression(paste(italic("Streptomyces"), " Chromosome")))
+ theme(legend.position = "none")
)
omeg_g
omeg_g <- (ggplot(ecol_omeg, aes(x=new_sections, y=value.mean, colour=class))
#  geom_errorbar(aes(ymin=value.mean-sd, ymax=value.mean+sd), width=.1, position=pd) +
+ geom_point(alpha = 0.75)
+ geom_smooth(method = lm)
#labels for the colours
+ annotate("text", x=5.4,y=0.4,label="omega", parse=TRUE, colour = "#B18C6E", size = 10)
+ scale_y_continuous(trans='log10',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10))
+ scale_color_manual(values=colours_arr)
#omega = 1 reference line
+  geom_hline(yintercept=1, linetype="dashed", color = "black", size=1)
#axis labels
+ xlab("Distance from the Origin of Replication (Mbp)")
+ ylab("Mean Expected Number of Substitutions per 10Kbp")
+ ylab("Mean Ratio of dN/dS per 10Kbp")
+ ggtitle(expression(paste(italic("Streptomyces"), " Chromosome")))
+ theme(legend.position = "none")
)
omeg_g
library(tidyverse)
library(data.table)
library(devtools)
library(cowplot)
library(ggpubr)
library(plyr)
library(dplyr)
library(directlabels)
options(scipen=10000)
theme_set(theme_bw() + theme(strip.background =element_rect(fill="#e7e5e2")) +
theme(strip.text = element_text(size =15)) +
#theme(plot.title = element_text(hjust = 0.5),
theme(plot.title = element_text(hjust = 0.5, size = 15),
panel.background = element_rect(fill = "white", colour = NA),
panel.grid.major = element_line(colour = "grey90", size = 0.2),
panel.grid.minor = element_line(colour = "grey98", size = 0.5),
panel.spacing = unit(0.25, "lines"),
strip.background = element_rect(fill = "#E6E1EA"),
axis.text=element_text(size=15),
axis.text.y.right = element_text(size=15),
axis.title = element_text(size = 15),
legend.title = element_blank(),
legend.text = element_text(size = 15),
legend.key = element_blank(),
legend.background=element_blank(),
legend.position="top")
)
#read in data'
sel_dat <- read.csv("./data/all_bac_selection_data.csv", header = FALSE)
#drop first column because it is just the row numbers
sel_dat <- sel_dat[,-1]
#col names
colnames(sel_dat) <- c("value", "position", "class", "bacteria")
#remove NAs
sel_dat <- sel_dat[!is.na(sel_dat$value),]
#number of bacterial replicons
num_of_plots <- length(levels(sel_dat$bacteria))
###################################
#########################
#chunking the data into sections of the genome
#########################
#decreasing order
sel_dat_ord <- arrange(sel_dat,position)
nmax_pos <- max(sel_dat_ord$position)
nmin_pos <- min(sel_dat_ord$position)
nmin_pos
#lenght of section of genome
chunklen <- 10000
chunk_len_of_genome <- round_any(nmax_pos, chunklen, f=ceiling)
chunk_len_of_genome
chunks <- seq(chunklen, chunk_len_of_genome, chunklen)
chunks
#expty vec to hold the rows that split the dat into X kb chunks
exp_rows_to_split_dat <- vector()
for (i in chunks) {
exp_rows <-
which(abs(sel_dat_ord$position-i)==min(abs(sel_dat$position-i)))
# finding the closest number to each 10kb without going over it
exp_max_row <- max(exp_rows)
#  actual_pos <- data_chrom_ordered$midpoint[max_row]
#  rows_to_split_dat <- c(rows_to_split_dat, actual_pos)
exp_rows_to_split_dat <- c(exp_rows_to_split_dat, exp_max_row)
}#for
#rows_to_split_dat <- rows_to_split_dat + 1
exp_rows_to_split_dat
diff <- c(exp_rows_to_split_dat[-1],NA)
tmp_df <- as.data.frame(cbind(exp_rows_to_split_dat,diff))
tmp_df$rep_vec <- tmp_df$diff - tmp_df$exp_rows_to_split_dat
head(tmp_df)
tail(tmp_df)
#make rep vector
rep_vec <- c(exp_rows_to_split_dat[1],tmp_df$rep_vec[-length(tmp_df$rep_vec)])
rep_vec
#rep_vec <- rep_vec[which(rep_vec != 0)]
#rep_vec
#make new column with "groups" of these chunks
new_sections <- rep(chunks, times = rep_vec)
sel_dat_ord$new_sections <- new_sections
head(sel_dat_ord)
#mean for each genome chunk
median_sel_dat <- sel_dat_ord %>%
dplyr::group_by(bacteria,class,new_sections) %>%
dplyr::summarise(value.mean = mean(value), value.sd = sd(value))
median_sel_dat
median_sel_dat <- tidyr::drop_na(median_sel_dat)
#plot just ecoli
ecol_dat <- median_sel_dat[which(median_sel_dat$bacteria == "strep"),]
head(ecol_dat)
#scale the genomic position
ecol_dat$new_sections <- ecol_dat$new_sections / 1000000
# The errorbars overlapped, so use position_dodge to move them horizontally
pd <- position_dodge(0.1) # move them .05 to the left and right
ecol_dat$class <- factor(ecol_dat$class, levels = c("dS", "omega", "dN"))
levels(ecol_dat$class) <- c("omega" = expression(omega),
"dS" = " dS",
"dN" = " dN")
levels(ecol_dat$class)
##make fake variable so I can subset the data
#ecol_dat$fake_class <- factor(ifelse(ecol_dat$class == "omega", 'ome', 'rates'))
#
#
#
#head(ecol_dat[which(ecol_dat$class == "omega"),])
#head(ecol_dat[which(ecol_dat$class == " dN"),])
#head(ecol_dat[which(ecol_dat$class == " dS"),])
#levels(ecol_dat$fake_class)
##levels(ecol_dat$fake_class) <- factor(ecol_dat$fake_class, levels= c("omeg", "rates"))
ecol_omeg <- ecol_dat[which(ecol_dat$class == "omega"),]
head(ecol_omeg)
ecol_rates <- ecol_dat[which(ecol_dat$class == "dS" | ecol_dat$class == "dN"),]
head(ecol_rates)
#choose colours
#colours_arr <- c("#B0413E","#928CAB")
#colours_arr <- c("#B7524F","#A09ABC")
#colours_arr <- c("#B7524F","#928CAB")
colours_arr <- c("#6494AA","#A09ABC")
#graph with only dS and dN
rate_g <- (ggplot(ecol_rates, aes(x=new_sections, y=value.mean, colour=class))
#  geom_errorbar(aes(ymin=value.mean-sd, ymax=value.mean+sd), width=.1, position=pd) +
+ geom_point(alpha = 0.75)
+ geom_smooth(method = lm)
#labels for the colours
+ annotate("text", x=5.4,y=0.015,label="dS", colour = "#A09ABC", size = 6)
+ annotate("text", x=5.4,y=0.0035,label="dN", colour = "#6494AA", size = 6)
+ scale_y_continuous(trans='log10',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10))
+ scale_color_manual(values=colours_arr)
#axis labels
+ xlab("Distance from the Origin of Replication (Mbp)")
+ ylab("Mean Expected Number of Substitutions per 10Kbp")
+ ggtitle(expression(paste(italic("Streptomyces"), " Chromosome")))
+ theme(legend.position = "none")
)
rate_g
colours_arr <- c("#C29979")
colours_arr <- c("#B18C6E")
omeg_g <- (ggplot(ecol_omeg, aes(x=new_sections, y=value.mean, colour=class))
#  geom_errorbar(aes(ymin=value.mean-sd, ymax=value.mean+sd), width=.1, position=pd) +
+ geom_point(alpha = 0.75)
+ geom_smooth(method = lm)
#labels for the colours
+ annotate("text", x=5.4,y=0.4,label="omega", parse=TRUE, colour = "#B18C6E", size = 10)
+ scale_y_continuous(trans='log10',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10))
+ scale_color_manual(values=colours_arr)
#omega = 1 reference line
+  geom_hline(yintercept=1, linetype="dashed", color = "black", size=1)
#axis labels
+ xlab("Distance from the Origin of Replication (Mbp)")
+ ylab("Mean Expected Number of Substitutions per 10Kbp")
+ ylab("Mean Ratio of dN/dS per 10Kbp")
+ ggtitle(expression(paste(italic("Streptomyces"), " Chromosome")))
+ theme(legend.position = "none")
)
omeg_g
##colours_arr <- c("#CFE7C8","#D2E4DC","#A0747A")
##colours_arr <- c("#7A306C","#8E8DBE","#5EB26D")
##colours_arr <- c("#A0747A","#5EB26D","#8E8DBE")
#colours_arr <- c("#5EB26D","#A0747A","#8E8DBE")
#span = 0.3
#distg <- (ggplot(ecol_dat, aes(x=new_sections, y=value.mean, colour=class))
##  geom_errorbar(aes(ymin=value.mean-sd, ymax=value.mean+sd), width=.1, position=pd) +
#  + geom_point()
#  + geom_smooth(method = lm)
#  #labels for the colours
#  + annotate("text", x=5.4,y=0.4,label="omega", parse=TRUE, colour = "#A0747A", size = 10)
#  + annotate("text", x=5.4,y=0.015,label="dS", colour = "#5EB26D", size = 6)
#  + annotate("text", x=5.4,y=0.0035,label="dN", colour = "#8E8DBE", size = 6)
#  + scale_y_continuous(trans='log10',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10))
#  #omega = 1 reference line
#  +  geom_hline(yintercept=1, linetype="dashed", color = "black", size=1)
#  + scale_color_manual(values=colours_arr)
#  #axis labels
#  + xlab("Distance from the Origin of Replication (Mbp)")
#  + ylab("Mean Expected Number of Substitutions per 10Kbp")
#  + ggtitle(expression(paste(italic("Streptomyces"), " Chromosome")))
#  + theme(legend.position = "none")
#)
#
#pdf("strep_selection.pdf")
#distg
#
#
#dev.off()
#
#
#(distg + facet_grid(fake_class ~ .)
#  #(distg + facet_grid(fake_class ~ . ,scales = "free_x", space = "free_x",labeller=labeller(treatment = labels))
#  #removing the facet labels
#  + theme(
#    strip.background = element_blank(),
#    #    strip.text.y  = element_blank()
#  )
#)
#get levels into order we want
levels(sel_dat$bacteria)
sel_dat$bacteria <- fct_relevel(sel_dat$bacteria,"ecoli","bass","strep","sinoC","pSymA","pSymB")
levels(sel_dat$bacteria)
#italic bacteria names
levels(sel_dat$bacteria) <- c("ecoli" = expression(paste(italic("E.coli"), "")),
"bass" = expression(paste(italic("B. subtilis"), "")),
"strep" = expression(paste(italic("Streptomyces"), "")),
"sinoC" = expression(paste(italic("S.meliloti"), " Chromosome")),
"pSymA" = expression(paste(italic("S.meliloti"), " pSymA")),
"pSymB" = expression(paste(italic("S.meliloti"), " pSymB")))
class(sel_dat$bacteria)
levels(sel_dat$bacteria)
#choose colours
#colours_arr <- rep(c("#5EB26D","#8E8DBE","#A0747A"),num_of_plots)
#colours_arr <- rep(c("#8E8DBE","#89C794","#A0747A"),num_of_plots)
colours_arr <- rep(c( "#8BC1C1","#928CAB","#C29979"),num_of_plots)
#plot
set.seed(1738);
vio_str_box <-(ggplot(sel_dat, aes(x=class, y=value, fill = class, colour = class))
+ geom_jitter(position=position_jitter(0.2))
+ geom_violin(colour = "black", fill = NA)
#+ geom_boxplot(width=.1, outlier.shape=NA, fill = colours_arr)
+ geom_boxplot(width=.1, outlier.shape=NA, colour = "black", fill = colours_arr)
+ stat_boxplot(geom = "errorbar", width = 0.2, colour = "black")
#omega = 1 reference line
+  geom_hline(yintercept=1, linetype="dashed", color = "black")
+ facet_wrap(~bacteria, labeller=label_parsed)
+ xlab("")
+ ylab("Expected Number of Substitutions per Site")
#+ scale_color_manual(values=c("#8E8DBE","#89C794","#A0747A"),labels = c(" dN", " dS", expression(omega)))
#+ scale_color_manual(values=c("#8BC1C1","#928CAB","#BE6361"),labels = c(" dN", " dS", expression(omega)))
+ scale_color_manual(values=c("#8BC1C1","#928CAB","#C29979"),labels = c(" dN", " dS", expression(omega)))
#make the omega a math symbol in x-axis
+ scale_x_discrete(breaks = c("dN", "dS", "omega"),labels = c("dN","dS", expression(omega)))
#log scale and removing trailing zeros from y-axis labels
#and have label at omega = 1 for reference
+ scale_y_continuous(trans='log10',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10,1000),
#adding a second axis for omega!
sec.axis = sec_axis(trans = ~ . * 1,
name = 'Ratio of dN/dS \n',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10,1000)))
#remove weird second legend
+ guides(fill=FALSE)
)
pdf("selection_vio_box.pdf")
vio_str_box
dev.off()
#read in data'
sel_dat <- read.csv("./data/all_bac_selection_data.csv", header = FALSE)
#drop first column because it is just the row numbers
sel_dat <- sel_dat[,-1]
#col names
colnames(sel_dat) <- c("value", "position", "class", "bacteria")
#remove NAs
sel_dat <- sel_dat[!is.na(sel_dat$value),]
#number of bacterial replicons
num_of_plots <- length(levels(sel_dat$bacteria))
###################################
#########################
#chunking the data into sections of the genome
#########################
#decreasing order
sel_dat_ord <- arrange(sel_dat,position)
nmax_pos <- max(sel_dat_ord$position)
nmin_pos <- min(sel_dat_ord$position)
nmin_pos
#lenght of section of genome
chunklen <- 10000
chunk_len_of_genome <- round_any(nmax_pos, chunklen, f=ceiling)
chunk_len_of_genome
chunks <- seq(chunklen, chunk_len_of_genome, chunklen)
chunks
#expty vec to hold the rows that split the dat into X kb chunks
exp_rows_to_split_dat <- vector()
for (i in chunks) {
exp_rows <-
which(abs(sel_dat_ord$position-i)==min(abs(sel_dat$position-i)))
# finding the closest number to each 10kb without going over it
exp_max_row <- max(exp_rows)
#  actual_pos <- data_chrom_ordered$midpoint[max_row]
#  rows_to_split_dat <- c(rows_to_split_dat, actual_pos)
exp_rows_to_split_dat <- c(exp_rows_to_split_dat, exp_max_row)
}#for
#rows_to_split_dat <- rows_to_split_dat + 1
exp_rows_to_split_dat
diff <- c(exp_rows_to_split_dat[-1],NA)
tmp_df <- as.data.frame(cbind(exp_rows_to_split_dat,diff))
tmp_df$rep_vec <- tmp_df$diff - tmp_df$exp_rows_to_split_dat
head(tmp_df)
tail(tmp_df)
#make rep vector
rep_vec <- c(exp_rows_to_split_dat[1],tmp_df$rep_vec[-length(tmp_df$rep_vec)])
rep_vec
#rep_vec <- rep_vec[which(rep_vec != 0)]
#rep_vec
#make new column with "groups" of these chunks
new_sections <- rep(chunks, times = rep_vec)
sel_dat_ord$new_sections <- new_sections
head(sel_dat_ord)
#mean for each genome chunk
median_sel_dat <- sel_dat_ord %>%
dplyr::group_by(bacteria,class,new_sections) %>%
dplyr::summarise(value.mean = mean(value), value.sd = sd(value))
median_sel_dat
median_sel_dat <- tidyr::drop_na(median_sel_dat)
#plot just ecoli
ecol_dat <- median_sel_dat[which(median_sel_dat$bacteria == "strep"),]
head(ecol_dat)
#scale the genomic position
ecol_dat$new_sections <- ecol_dat$new_sections / 1000000
##make fake variable so I can subset the data
#ecol_dat$fake_class <- factor(ifelse(ecol_dat$class == "omega", 'ome', 'rates'))
#
#
#
#head(ecol_dat[which(ecol_dat$class == "omega"),])
#head(ecol_dat[which(ecol_dat$class == " dN"),])
#head(ecol_dat[which(ecol_dat$class == " dS"),])
#levels(ecol_dat$fake_class)
##levels(ecol_dat$fake_class) <- factor(ecol_dat$fake_class, levels= c("omeg", "rates"))
ecol_omeg <- ecol_dat[which(ecol_dat$class == "omega"),]
head(ecol_omeg)
ecol_rates <- ecol_dat[which(ecol_dat$class == "dS" | ecol_dat$class == "dN"),]
head(ecol_rates)
#choose colours
#colours_arr <- c("#B0413E","#928CAB")
#colours_arr <- c("#B7524F","#A09ABC")
#colours_arr <- c("#B7524F","#928CAB")
colours_arr <- c("#6494AA","#A09ABC")
#graph with only dS and dN
rate_g <- (ggplot(ecol_rates, aes(x=new_sections, y=value.mean, colour=class))
#  geom_errorbar(aes(ymin=value.mean-sd, ymax=value.mean+sd), width=.1, position=pd) +
+ geom_point(alpha = 0.75)
+ geom_smooth(method = lm)
#labels for the colours
+ annotate("text", x=5.4,y=0.015,label="dS", colour = "#A09ABC", size = 6)
+ annotate("text", x=5.4,y=0.0035,label="dN", colour = "#6494AA", size = 6)
+ scale_y_continuous(trans='log10',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10))
+ scale_color_manual(values=colours_arr)
#axis labels
+ xlab("Distance from the Origin of Replication (Mbp)")
+ ylab("Mean Expected Number of Substitutions per 10Kbp")
+ ggtitle(expression(paste(italic("Streptomyces"), " Chromosome")))
+ theme(legend.position = "none")
)
rate_g
rate_g
colours_arr <- c("#C29979")
colours_arr <- c("#B18C6E")
omeg_g <- (ggplot(ecol_omeg, aes(x=new_sections, y=value.mean, colour=class))
#  geom_errorbar(aes(ymin=value.mean-sd, ymax=value.mean+sd), width=.1, position=pd) +
+ geom_point(alpha = 0.75)
+ geom_smooth(method = lm)
#labels for the colours
+ annotate("text", x=5.4,y=0.4,label="omega", parse=TRUE, colour = "#B18C6E", size = 10)
+ scale_y_continuous(trans='log10',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10))
+ scale_color_manual(values=colours_arr)
#omega = 1 reference line
+  geom_hline(yintercept=1, linetype="dashed", color = "black", size=1)
#axis labels
+ xlab("Distance from the Origin of Replication (Mbp)")
+ ylab("Mean Expected Number of Substitutions per 10Kbp")
+ ylab("Mean Ratio of dN/dS per 10Kbp")
+ ggtitle(expression(paste(italic("Streptomyces"), " Chromosome")))
+ theme(legend.position = "none")
)
omeg_g
#get levels into order we want
levels(sel_dat$bacteria)
sel_dat$bacteria <- fct_relevel(sel_dat$bacteria,"ecoli","bass","strep","sinoC","pSymA","pSymB")
levels(sel_dat$bacteria)
#italic bacteria names
levels(sel_dat$bacteria) <- c("ecoli" = expression(paste(italic("E.coli"), "")),
"bass" = expression(paste(italic("B. subtilis"), "")),
"strep" = expression(paste(italic("Streptomyces"), "")),
"sinoC" = expression(paste(italic("S.meliloti"), " Chromosome")),
"pSymA" = expression(paste(italic("S.meliloti"), " pSymA")),
"pSymB" = expression(paste(italic("S.meliloti"), " pSymB")))
class(sel_dat$bacteria)
levels(sel_dat$bacteria)
#choose colours
#colours_arr <- rep(c("#5EB26D","#8E8DBE","#A0747A"),num_of_plots)
#colours_arr <- rep(c("#8E8DBE","#89C794","#A0747A"),num_of_plots)
colours_arr <- rep(c( "#8BC1C1","#928CAB","#C29979"),num_of_plots)
#plot
set.seed(1738);
vio_str_box <-(ggplot(sel_dat, aes(x=class, y=value, fill = class, colour = class))
+ geom_jitter(position=position_jitter(0.2))
+ geom_violin(colour = "black", fill = NA)
#+ geom_boxplot(width=.1, outlier.shape=NA, fill = colours_arr)
+ geom_boxplot(width=.1, outlier.shape=NA, colour = "black", fill = colours_arr)
+ stat_boxplot(geom = "errorbar", width = 0.2, colour = "black")
#omega = 1 reference line
+  geom_hline(yintercept=1, linetype="dashed", color = "black")
+ facet_wrap(~bacteria, labeller=label_parsed)
+ xlab("")
+ ylab("Expected Number of Substitutions per Site")
#+ scale_color_manual(values=c("#8E8DBE","#89C794","#A0747A"),labels = c(" dN", " dS", expression(omega)))
#+ scale_color_manual(values=c("#8BC1C1","#928CAB","#BE6361"),labels = c(" dN", " dS", expression(omega)))
+ scale_color_manual(values=c("#8BC1C1","#928CAB","#C29979"),labels = c(" dN", " dS", expression(omega)))
#make the omega a math symbol in x-axis
+ scale_x_discrete(breaks = c("dN", "dS", "omega"),labels = c("dN","dS", expression(omega)))
#log scale and removing trailing zeros from y-axis labels
#and have label at omega = 1 for reference
+ scale_y_continuous(trans='log10',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10,1000),
#adding a second axis for omega!
sec.axis = sec_axis(trans = ~ . * 1,
name = 'Ratio of dN/dS \n',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10,1000)))
#remove weird second legend
+ guides(fill=FALSE)
)
vio_str_box
omeg_g <- (ggplot(ecol_omeg, aes(x=new_sections, y=value.mean, colour=class))
#  geom_errorbar(aes(ymin=value.mean-sd, ymax=value.mean+sd), width=.1, position=pd) +
+ geom_point(alpha = 0.75)
+ geom_smooth()
#labels for the colours
+ annotate("text", x=5.4,y=0.4,label="omega", parse=TRUE, colour = "#B18C6E", size = 10)
+ scale_y_continuous(trans='log10',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10))
+ scale_color_manual(values=colours_arr)
#omega = 1 reference line
+  geom_hline(yintercept=1, linetype="dashed", color = "black", size=1)
#axis labels
+ xlab("Distance from the Origin of Replication (Mbp)")
+ ylab("Mean Expected Number of Substitutions per 10Kbp")
+ ylab("Mean Ratio of dN/dS per 10Kbp")
+ ggtitle(expression(paste(italic("Streptomyces"), " Chromosome")))
+ theme(legend.position = "none")
)
omeg_g
#graph with only dS and dN
rate_g <- (ggplot(ecol_rates, aes(x=new_sections, y=value.mean, colour=class))
#  geom_errorbar(aes(ymin=value.mean-sd, ymax=value.mean+sd), width=.1, position=pd) +
+ geom_point(alpha = 0.75)
+ geom_smooth()
#labels for the colours
+ annotate("text", x=5.4,y=0.015,label="dS", colour = "#A09ABC", size = 6)
+ annotate("text", x=5.4,y=0.0035,label="dN", colour = "#6494AA", size = 6)
+ scale_y_continuous(trans='log10',labels = function(x) ifelse(x == 0, "0", x), breaks=c(0.001,0.1, 1, 10))
+ scale_color_manual(values=colours_arr)
#axis labels
+ xlab("Distance from the Origin of Replication (Mbp)")
+ ylab("Mean Expected Number of Substitutions per 10Kbp")
+ ggtitle(expression(paste(italic("Streptomyces"), " Chromosome")))
+ theme(legend.position = "none")
)
rate_g
